@page "/UserProfile"
@inherits LayoutComponentBase
@using DataBasHunters.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Http

<div class="container">
    @if (vm != null)
    {
        <div class="ProfileGrid">
            <div>
                <p><img src="@vm.user.Profilepicture" alt="Profile Picture" /></p>

                <form method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <InputFile OnChange="@OnInputFileChange" class="form-control" />
                        <button type="button" @onclick="UploadFile" class="btn btn-primary">Upload</button>
                    </div>
                </form>
            </div>
            <div>
                <h1>@vm.user.Id - @vm.user.Username</h1>
                <h1>@vm.user.Funds kr</h1>
            </div>
        </div>

        <div>
            <h3>Transaction History - total win/loss: @slut kr</h3>

            @if (vm.history != null && vm.history.Any())
            {
                <canvas id="myChart"></canvas>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Transaction ID</th>
                            <th>Sum</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in vm.history)
                        {
                            <tr>
                                <td>@transaction.Id</td>
                                <td>@transaction.Sum</td>
                                <td>@transaction.Date</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No transaction history available.</p>
            }
        </div>
    }
    else
    {
        <p>Please log in to view your profile.</p>
    }
   

</div>



<style>
    .ProfileGrid {
        display: grid;
        grid-template-columns: 60% 40%;
        align-items: center;
        align-content: center;
        text-align: center;
        margin: 10% 2% 10% 2%;
    }

    .form-group {
        align-content: center;
        align-items: center;
        margin-top: 10px;
        width: 80%
    }
</style>

@code {
    private ViewModelProfile vm;
    private object data; // Variable to store chart data
    private object options; // Variable to store chart options
    private int slut = 0;

    private List<int> transactions = new List<int>();
    private List<DateTime> ids = new List<DateTime>();

    private IBrowserFile uploadedFile;
    private byte[] fileBytes;
    private string fileName;


    protected override async Task OnInitializedAsync()
    {
        // Retrieve information about the logged-in user
        // You need to implement a mechanism to get the logged-in user's information
        // This is just a placeholder, and you should replace it with the actual logic.

        // Make an HTTP request to UserProfile action to get user information
        var response = await Http.GetAsync("GetUser");

        if (response.IsSuccessStatusCode)
        {
            vm = await response.Content.ReadFromJsonAsync<ViewModelProfile>();
        }
        else
        {
            NavigationManager.NavigateTo("/Login");
        }

        foreach (var transaction in vm.history)
        {
            transactions.Add(transaction.Sum);
            ids.Add(transaction.Date);
            slut = slut + transaction.Sum;
        }

        // Initialize chart data
        data = new
        {
            labels = ids,
            datasets = new[]
        {
            new
                {
                    label = "Your history",
                    data = transactions,
                    backgroundColor = "rgba(255, 99, 132, 0.2)",
                    borderColor = "rgb(255, 99, 132)",
                    borderWidth = 1,
                }
            }
        };

        // Initialize chart options
        options = new
        {
            scales = new
            {
                yAxes = new[]
                {
                    new { ticks = new { beginAtZero = true } }
                }
            }
        };
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("createChart",
                "myChart",
                "line", // chart type
                data,  // chart data
                options // chart options
            );
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            fileBytes = new byte[file.Size];
            await stream.ReadAsync(fileBytes, 0, (int)file.Size);
            fileName = file.Name;
            uploadedFile = file;
        }
    }

    private async Task UploadFile()
    {
        if (fileBytes != null)
        {
            // Save the file to wwwroot/images and update the database
            // Generate a unique file name
            string uniqueFileName = $"{Guid.NewGuid()}_{fileName}";
            string filePath = Path.Combine("wwwroot/images", uniqueFileName);

            // Save the file to the server
            await File.WriteAllBytesAsync(filePath, fileBytes);

            // Update the user profile in the database
            string imageUrl = $"/images/{uniqueFileName}";
            vm.user.Profilepicture = imageUrl; // Update the local model
            var updateResponse = await Http.PostAsJsonAsync("UpdateUserImage", new { Id = vm.user.Id, Url = imageUrl });

            if (updateResponse.IsSuccessStatusCode)
            {
                 StateHasChanged();
            }
            else
            {
                // Handle error
            }
        }
    }


}