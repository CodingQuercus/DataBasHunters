@page "/coinflip/{gameId}"

@using DataBasHunters.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Coinflip</PageTitle>

<h1>Coinflip Game</h1>
<p>Opponent: @Model.opponent?.Username</p>
<p>Creator: @Model.creator?.Username</p>
<p>Game ID: @Model.game?.Id</p>

<div id="coin" class="@coinClass" @onclick="FlipCoinHandler">
    <div class="side-a"></div>
    <div class="side-b"></div>
</div>
<h2>Click on coin to flip</h2>

<!-- Display winner section -->
@if (Model != null && Model.game != null && Model.game.Active == 0)
{
    if (finishGame.winner != null)
    {
        <h3>Winner: @finishGame?.winner?.Username</h3>
        <h3>Amount: @Model.game.Sum</h3>

    }
}

<style>
    body {
        padding-top: 50px;
        background: #F7F7F7;
        perspective: 800px;
    }

    h1 {
        text-align: center;
    }

    #coin {
        position: relative;
        margin: 0 auto;
        width: 150px; /* Adjust the width */
        height: 150px; /* Adjust the height */
        cursor: pointer;
        transform-style: preserve-3d;
        transition: transform 2s ease-in; /* Adjust the duration */
    }

        #coin div {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            box-shadow: inset 0 0 45px rgba(255, 255, 255, .3), 0 12px 20px -10px rgba(0, 0, 0, .4);
            position: absolute;
            backface-visibility: hidden;
        }

    .side-a {
        background-color: #bb0000;
        z-index: 100;
    }

    .side-b {
        background-color: #3e3e3e;
        transform: rotateY(-180deg);
    }

    .heads {
        transform: rotateY(1800deg);
    }

    .tails {
        transform: rotateY(1980deg);
    }
</style>

@code {
    private string coinClass = "";
    private ViewModelCoinFlip Model = new ViewModelCoinFlip();
    private FinishGame finishGame = new FinishGame(); // Move the declaration here

    [Parameter]
    public string gameId { get; set; }

    private async Task FlipCoinHandler()
    {
        var flipResult = new Random().NextDouble();

        bool heads;

        if (flipResult <= 0.5)
        {
            coinClass = "heads";
            heads = true;
        }
        else
        {
            coinClass = "tails";
            heads = false;
        }

        if (Model.game.Heads == heads)
        {
            finishGame.winner = Model.creator;
            finishGame.loser = Model.opponent;
        }
        else
        {
            finishGame.winner = Model.opponent;
            finishGame.loser = Model.creator;
        }
        finishGame.game = Model.game;
        finishGame.joinperson = Model.opponent;
        var response = await Http.PostAsJsonAsync($"coinflip/{gameId}", finishGame);

        // Notify Blazor to refresh the UI
        StateHasChanged();
    }

    private ViewModelProfile vm;

    protected override async Task OnInitializedAsync()
    {
        var response1 = await Http.GetAsync("GetUser");

        if (response1.IsSuccessStatusCode)
        {
            vm = await response1.Content.ReadFromJsonAsync<ViewModelProfile>();
        }
        else
        {
            NavigationManager.NavigateTo("/Login");
        }

        var response = await Http.GetFromJsonAsync<ViewModelCoinFlip>($"coinflip/{gameId}");

        Model = response;
    }
}
